class LinkedNode:
    def __init__(self,val,nex,prev,key):
        self.key = key
        self.val = val
        self.prev = prev
        self.nex = nex

class DLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

class LRUCache:

    def __init__(self, capacity: int):
        self.cap = capacity
        self.cur = 0
        self.cache = {}
        self.list = DLinkedList()
        
    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            if node != self.list.head:
                if node == self.list.tail:
                    self.list.tail = node.prev
                else:
                    node.nex.prev = node.prev
                node.prev.nex = node.nex
                node.prev = None
                node.nex = self.list.head
                self.list.head.prev = node
                self.list.head = node
            return(self.cache[key].val)
        else:
            return(-1)
        
    def put(self, key: int, value: int) -> None:
        
        if key in self.cache:
            node = self.cache[key]
            node.val = value
            if node != self.list.head:
                if node == self.list.tail:
                    self.list.tail = node.prev
                else:
                    node.nex.prev = node.prev
                node.prev.nex = node.nex
                node.prev = None
                node.nex = self.list.head
                self.list.head.prev = node
                self.list.head = node
        else:
            if self.cur < self.cap:
                node = LinkedNode(value,self.list.head,None, key)
                if self.cur == 0:
                    self.list.head = node
                    self.list.tail = node
                self.cache[key] = node
                self.list.head.prev = node
                self.list.head = node
                self.cur += 1
            else:
                node = LinkedNode(value,self.list.head,None, key)
                self.cache[key] = node
                self.list.head.prev = node
                self.list.head = node
                self.cache.pop(self.list.tail.key)
                self.list.tail = self.list.tail.prev
                self.list.tail.nex = None
